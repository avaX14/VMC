{"version":3,"sources":["utils/validations.js","containers/ForgotPasswordPage/constants.js","containers/ForgotPasswordPage/reducer.js","containers/ForgotPasswordPage/selectors.js","containers/ForgotPasswordPage/actions.js","containers/ForgotPasswordPage/validations.js","containers/ForgotPasswordPage/messages.js","containers/ForgotPasswordPage/ForgotPasswordForm.js","containers/ForgotPasswordPage/saga.js","containers/ForgotPasswordPage/index.js"],"names":["Yup","mixed","required","messages","oneOf","string","email","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","FORGOT_PASSWORD_ERROR","initialState","isPending","forgotPasswordReducer","state","action","produce","draft","type","selectForgotPassword","forgotPassword","setErrors","meta","forgotPasswordSchema","object","shape","scope","defineMessages","forgotPasswordTitle","id","defaultMessage","resetPasswordButton","emailInputLabel","resetLinkSent","ForgotPasswordForm","onSubmit","formatMessage","useIntl","initialValues","validationSchema","values","htmlFor","name","autoFocus","msg","label","disabled","forgotPasswordSaga","call","request","url","method","data","put","enqueueSnackbar","message","status","errors","takeLatest","key","ForgotPasswordPage","useInjectReducer","reducer","useInjectSaga","saga","dispatch","useDispatch","isForgotPasswordPending","useSelector","createSelector","substate","submitForgotPasswordForm","useCallback"],"mappings":"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","file":"static/js/9.17985b31.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport messages from '../messages';\n\nYup.setLocale({\n  mixed: {\n    required: messages.required,\n    oneOf: messages.oneOf\n  },\n  string: {\n    email: messages.email\n  }\n});\n\nexport default Yup;\n","export const FORGOT_PASSWORD = '[Forgot Password]';\n\nexport const FORGOT_PASSWORD_REQUEST = `${FORGOT_PASSWORD} FORGOT_PASSWORD_REQUEST`;\nexport const FORGOT_PASSWORD_SUCCESS = `${FORGOT_PASSWORD} FORGOT_PASSWORD_SUCCESS`;\nexport const FORGOT_PASSWORD_ERROR = `${FORGOT_PASSWORD} FORGOT_PASSWORD_ERROR`;\n","import produce from 'immer';\nimport {\n  FORGOT_PASSWORD_REQUEST,\n  FORGOT_PASSWORD_SUCCESS,\n  FORGOT_PASSWORD_ERROR\n} from './constants';\n\nexport const initialState = {\n  isPending: false\n};\n\n/* eslint-disable default-case */\nconst forgotPasswordReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case FORGOT_PASSWORD_REQUEST:\n        draft.isPending = true;\n        break;\n      case FORGOT_PASSWORD_SUCCESS:\n      case FORGOT_PASSWORD_ERROR:\n        draft.isPending = false;\n        break;\n    }\n  });\n\nexport default forgotPasswordReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst selectForgotPassword = state => state.forgotPassword || initialState;\n\nconst makeSelectIsForgotPasswordPending = () =>\n  createSelector(\n    selectForgotPassword,\n    substate => substate.isPending\n  );\n\nexport { makeSelectIsForgotPasswordPending };\n","import {\n  FORGOT_PASSWORD_REQUEST,\n  FORGOT_PASSWORD_SUCCESS,\n  FORGOT_PASSWORD_ERROR\n} from './constants';\n\nexport function forgotPassword(email, setErrors) {\n  return {\n    type: FORGOT_PASSWORD_REQUEST,\n    email,\n    meta: {\n      setErrors\n    }\n  };\n}\n\nexport function forgotPasswordSuccess() {\n  return {\n    type: FORGOT_PASSWORD_SUCCESS\n  };\n}\n\nexport function forgotPasswordError() {\n  return {\n    type: FORGOT_PASSWORD_ERROR\n  };\n}\n","import Yup from 'utils/validations';\n\nexport const forgotPasswordSchema = Yup.object().shape({\n  email: Yup.string()\n    .email()\n    .required()\n});\n","import { defineMessages } from 'react-intl';\n\nexport const scope = 'forgot_password_page';\n\nexport default defineMessages({\n  forgotPasswordTitle: {\n    id: `${scope}.text.forgot_password_title`,\n    defaultMessage: 'Forgot Password'\n  },\n  resetPasswordButton: {\n    id: `${scope}.button.reset_password`,\n    defaultMessage: 'Reset password'\n  },\n  emailInputLabel: {\n    id: `${scope}.input_label.email`,\n    defaultMessage: 'Email Address'\n  },\n  resetLinkSent: {\n    id: `${scope}.notifications.reset_link_sent`,\n    defaultMessage: 'Password reset link sent'\n  }\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { forgotPasswordSchema } from './validations';\nimport messages from './messages';\n\nfunction ForgotPasswordForm({ onSubmit, isPending }) {\n  const handleOnSubmit = (values, { setErrors }) => {\n    const { email } = values;\n    onSubmit(email, setErrors);\n  };\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Formik\n      initialValues={{\n        email: ''\n      }}\n      validationSchema={forgotPasswordSchema}\n      onSubmit={handleOnSubmit}\n    >\n      <Form>\n        <div>\n          <label htmlFor=\"email\">\n            {formatMessage(messages.emailInputLabel)}\n          </label>\n          <Field type=\"email\" name=\"email\" required autoFocus />\n          <ErrorMessage name=\"email\">\n            {msg =>\n              formatMessage(msg, {\n                label: formatMessage(messages.emailInputLabel)\n              })\n            }\n          </ErrorMessage>\n        </div>\n        <button disabled={isPending} type=\"submit\">\n          {formatMessage(messages.resetPasswordButton)}\n        </button>\n      </Form>\n    </Formik>\n  );\n}\n\nForgotPasswordForm.propTypes = {\n  onSubmit: PropTypes.func,\n  isPending: PropTypes.bool\n};\n\nexport default ForgotPasswordForm;\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport request from 'utils/request';\nimport { enqueueSnackbar } from 'containers/Notifier/actions';\nimport { forgotPasswordSuccess, forgotPasswordError } from './actions';\nimport { FORGOT_PASSWORD_REQUEST } from './constants';\nimport messages from './messages';\n\nexport function* forgotPassword({ email, meta: { setErrors } }) {\n  try {\n    yield call(request, {\n      url: '/user/forgot-password',\n      method: 'post',\n      data: { email }\n    });\n    yield put(forgotPasswordSuccess());\n    yield put(\n      enqueueSnackbar({\n        message: messages.resetLinkSent\n      })\n    );\n  } catch (error) {\n    if (error.status === 422) {\n      yield call(setErrors, error.data.errors);\n    }\n    yield put(forgotPasswordError());\n  }\n}\n\nexport default function* forgotPasswordSaga() {\n  yield takeLatest(FORGOT_PASSWORD_REQUEST, forgotPassword);\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { useIntl } from 'react-intl';\nimport { useInjectReducer } from 'utils/injectReducer';\nimport { useInjectSaga } from 'utils/injectSaga';\nimport { makeSelectIsForgotPasswordPending } from './selectors';\nimport { forgotPassword } from './actions';\nimport ForgotPasswordForm from './ForgotPasswordForm';\nimport reducer from './reducer';\nimport saga from './saga';\nimport messages from './messages';\n\nconst key = 'forgotPassword';\n\nfunction ForgotPasswordPage() {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  const dispatch = useDispatch();\n  const isForgotPasswordPending = useSelector(\n    makeSelectIsForgotPasswordPending()\n  );\n  const submitForgotPasswordForm = useCallback(\n    (...args) => dispatch(forgotPassword(...args)),\n    [dispatch]\n  );\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <main>\n      <Helmet>\n        <title>Forgot Password - React Boilerplate</title>\n      </Helmet>\n      <h1>{formatMessage(messages.forgotPasswordTitle)}</h1>\n      <ForgotPasswordForm\n        onSubmit={submitForgotPasswordForm}\n        isPending={isForgotPasswordPending}\n      />\n    </main>\n  );\n}\n\nexport default ForgotPasswordPage;\n"],"sourceRoot":""}