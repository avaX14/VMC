{"version":3,"sources":["utils/validations.js","utils/parseApiErrorsToFormik.js","containers/ResetPasswordPage/constants.js","containers/ResetPasswordPage/reducer.js","containers/ResetPasswordPage/selectors.js","containers/ResetPasswordPage/actions.js","containers/ResetPasswordPage/validations.js","containers/ResetPasswordPage/messages.js","containers/ResetPasswordPage/ResetPasswordForm.js","containers/ResetPasswordPage/saga.js","containers/ResetPasswordPage/index.js"],"names":["Yup","mixed","required","messages","oneOf","string","email","parseApiErrorsToFormik","errors","result","key","camelCase","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_ERROR","initialState","isPending","resetPasswordReducer","state","action","produce","draft","type","selectResetPassword","resetPassword","password","passwordConfirmation","setErrors","meta","resetPasswordSchema","object","shape","ref","scope","defineMessages","resetPasswordTitle","id","defaultMessage","resetPasswordButton","passwordInputLabel","passwordConfirmationInputLabel","passwordReseted","ResetPasswordForm","onSubmit","formatMessage","useIntl","initialValues","validationSchema","values","htmlFor","name","autoFocus","msg","label","disabled","resetPasswordSage","getRouterLocationSearch","router","location","search","select","params","URLSearchParams","token","get","call","request","url","method","data","password_confirmation","put","enqueueSnackbar","message","push","LOGIN","status","takeLatest","ResetPasswordPage","useInjectReducer","reducer","useInjectSaga","saga","dispatch","useDispatch","isResetPasswordPending","useSelector","createSelector","substate","submitResetPasswordForm","useCallback"],"mappings":"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","file":"static/js/8.029a72d0.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport messages from '../messages';\n\nYup.setLocale({\n  mixed: {\n    required: messages.required,\n    oneOf: messages.oneOf\n  },\n  string: {\n    email: messages.email\n  }\n});\n\nexport default Yup;\n","import camelCase from 'lodash/camelCase';\n\nexport default function parseApiErrorsToFormik(errors) {\n  let result = {};\n\n  for (let key in errors) {\n    result[camelCase(key)] = errors[key][0];\n  }\n\n  return result;\n}\n","export const RESET_PASSWORD = '[Reset Password]';\n\nexport const RESET_PASSWORD_REQUEST = `${RESET_PASSWORD} RESET_PASSWORD_REQUEST`;\nexport const RESET_PASSWORD_SUCCESS = `${RESET_PASSWORD} RESET_PASSWORD_SUCCESS`;\nexport const RESET_PASSWORD_ERROR = `${RESET_PASSWORD} RESET_PASSWORD_ERROR`;\n","import produce from 'immer';\nimport {\n  RESET_PASSWORD_REQUEST,\n  RESET_PASSWORD_SUCCESS,\n  RESET_PASSWORD_ERROR\n} from './constants';\n\nexport const initialState = {\n  isPending: false\n};\n\n/* eslint-disable default-case */\nconst resetPasswordReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case RESET_PASSWORD_REQUEST:\n        draft.isPending = true;\n        break;\n      case RESET_PASSWORD_SUCCESS:\n      case RESET_PASSWORD_ERROR:\n        draft.isPending = false;\n        break;\n    }\n  });\n\nexport default resetPasswordReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst selectResetPassword = state => state.resetPassword || initialState;\n\nconst makeSelectIsResetPasswordPending = () =>\n  createSelector(\n    selectResetPassword,\n    substate => substate.isPending\n  );\n\nexport { makeSelectIsResetPasswordPending };\n","import {\n  RESET_PASSWORD_REQUEST,\n  RESET_PASSWORD_SUCCESS,\n  RESET_PASSWORD_ERROR\n} from './constants';\n\nexport function resetPassword(password, passwordConfirmation, setErrors) {\n  return {\n    type: RESET_PASSWORD_REQUEST,\n    password,\n    passwordConfirmation,\n    meta: {\n      setErrors\n    }\n  };\n}\n\nexport function resetPasswordSuccess() {\n  return {\n    type: RESET_PASSWORD_SUCCESS\n  };\n}\n\nexport function resetPasswordError() {\n  return {\n    type: RESET_PASSWORD_ERROR\n  };\n}\n","import Yup from 'utils/validations';\n\nexport const resetPasswordSchema = Yup.object().shape({\n  password: Yup.string().required(),\n  passwordConfirmation: Yup.string()\n    .oneOf([Yup.ref('password'), null])\n    .required()\n});\n","import { defineMessages } from 'react-intl';\n\nexport const scope = 'reset_password_page';\n\nexport default defineMessages({\n  resetPasswordTitle: {\n    id: `${scope}.text.reset_password_title`,\n    defaultMessage: 'Reset Password'\n  },\n  resetPasswordButton: {\n    id: `${scope}.button.reset_password`,\n    defaultMessage: 'Reset password'\n  },\n  passwordInputLabel: {\n    id: `${scope}.input_label.password`,\n    defaultMessage: 'Password'\n  },\n  passwordConfirmationInputLabel: {\n    id: `${scope}.input_label.password_confirmation`,\n    defaultMessage: 'Password Confirmation'\n  },\n  passwordReseted: {\n    id: `${scope}.notifications.password_reseted`,\n    defaultMessage: 'You can now login with new password'\n  }\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { resetPasswordSchema } from './validations';\nimport messages from './messages';\n\nexport default function ResetPasswordForm({ onSubmit, isPending }) {\n  const { formatMessage } = useIntl();\n\n  const handleOnSubmit = (values, { setErrors }) => {\n    const { password, passwordConfirmation } = values;\n    onSubmit(password, passwordConfirmation, setErrors);\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        passwordConfirmation: ''\n      }}\n      validationSchema={resetPasswordSchema}\n      onSubmit={handleOnSubmit}\n    >\n      <Form>\n        <div>\n          <label htmlFor=\"password\">\n            {formatMessage(messages.passwordInputLabel)}\n          </label>\n          <Field type=\"password\" name=\"password\" required autoFocus />\n          <ErrorMessage name=\"password\">\n            {msg =>\n              formatMessage(msg, {\n                label: formatMessage(messages.passwordInputLabel)\n              })\n            }\n          </ErrorMessage>\n        </div>\n        <div>\n          <label htmlFor=\"passwordConfirmation\">\n            {formatMessage(messages.passwordConfirmationInputLabel)}\n          </label>\n          <Field type=\"password\" name=\"passwordConfirmation\" required />\n          <ErrorMessage name=\"passwordConfirmation\">\n            {msg =>\n              formatMessage(msg, {\n                label: formatMessage(messages.passwordConfirmationInputLabel)\n              })\n            }\n          </ErrorMessage>\n        </div>\n        <button disabled={isPending} type=\"submit\">\n          {formatMessage(messages.resetPasswordButton)}\n        </button>\n      </Form>\n    </Formik>\n  );\n}\n\nResetPasswordForm.propTypes = {\n  onSubmit: PropTypes.func,\n  isPending: PropTypes.bool\n};\n","import { takeLatest, call, put, select } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport request from 'utils/request';\nimport parseApiErrorsToFormik from 'utils/parseApiErrorsToFormik';\nimport { enqueueSnackbar } from 'containers/Notifier/actions';\nimport { resetPasswordSuccess, resetPasswordError } from './actions';\nimport { RESET_PASSWORD_REQUEST } from './constants';\nimport { LOGIN } from 'routes';\nimport messages from './messages';\n\nconst getRouterLocationSearch = state => state.router.location.search;\n\nexport function* resetPassword({\n  password,\n  passwordConfirmation,\n  meta: { setErrors }\n}) {\n  try {\n    const search = yield select(getRouterLocationSearch);\n    const params = new URLSearchParams(search);\n    const token = params.get('forgot_password_token');\n    yield call(request, {\n      url: '/user/reset-password',\n      method: 'post',\n      data: { token, password, password_confirmation: passwordConfirmation }\n    });\n    yield put(resetPasswordSuccess());\n    yield put(\n      enqueueSnackbar({\n        message: messages.passwordReseted\n      })\n    );\n    yield put(push(LOGIN));\n  } catch (error) {\n    if (error.status === 422) {\n      yield call(setErrors, parseApiErrorsToFormik(error.data.errors));\n    }\n    yield put(resetPasswordError());\n  }\n}\n\nexport default function* resetPasswordSage() {\n  yield takeLatest(RESET_PASSWORD_REQUEST, resetPassword);\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { useIntl } from 'react-intl';\nimport { useInjectReducer } from 'utils/injectReducer';\nimport { useInjectSaga } from 'utils/injectSaga';\nimport { makeSelectIsResetPasswordPending } from './selectors';\nimport { resetPassword } from './actions';\nimport ResetPasswordForm from './ResetPasswordForm';\nimport reducer from './reducer';\nimport saga from './saga';\nimport messages from './messages';\n\nconst key = 'resetPassword';\n\nexport function ResetPasswordPage() {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  const dispatch = useDispatch();\n  const isResetPasswordPending = useSelector(\n    makeSelectIsResetPasswordPending()\n  );\n  const submitResetPasswordForm = useCallback(\n    (...args) => dispatch(resetPassword(...args)),\n    [dispatch]\n  );\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <main>\n      <Helmet>\n        <title>Reset Password - React Boilerplate</title>\n      </Helmet>\n      <h1>{formatMessage(messages.resetPasswordTitle)}</h1>\n      <ResetPasswordForm\n        onSubmit={submitResetPasswordForm}\n        isPending={isResetPasswordPending}\n      />\n    </main>\n  );\n}\n\nexport default ResetPasswordPage;\n"],"sourceRoot":""}