{"version":3,"sources":["utils/validations.js","utils/parseApiErrorsToFormik.js","../node_modules/lodash/isNull.js","containers/UserProfilePage/constants.js","containers/UserProfilePage/reducer.js","containers/UserProfilePage/selectors.js","containers/UserProfilePage/actions.js","containers/UserProfilePage/validations.js","containers/UserProfilePage/messages.js","containers/UserProfilePage/ImageField.js","containers/UserProfilePage/UpdateUserForm.js","containers/UserProfilePage/ChangePasswordForm.js","containers/UserProfilePage/saga.js","containers/UserProfilePage/index.js"],"names":["Yup","mixed","required","messages","oneOf","string","email","parseApiErrorsToFormik","errors","result","key","camelCase","module","exports","value","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_ERROR","CHANGE_PASSWORD_REQUEST","CHANGE_PASSWORD_SUCCESS","CHANGE_PASSWORD_ERROR","initialState","isUpdateUserPending","isChangePasswordPending","userProfileReducer","state","action","produce","draft","type","selectUserProfile","userProfile","updateUser","firstName","lastName","avatar","setErrors","meta","changePassword","currentPassword","newPassword","newPasswordConfirmation","resetForm","updateUserSchema","object","shape","changePasswordSchema","ref","scope","defineMessages","updateUserHeader","id","defaultMessage","updateButton","changePasswordButton","firstNameInputLabel","lastNameInputLabel","currentPasswordInputLabel","newPasswordInputLabel","newPasswordConfirmationInputLabel","profileUpdated","passwordChanged","ImageField","field","setFieldValue","name","useState","Date","now","setKey","accept","onChange","event","currentTarget","files","onClick","UpdateUserForm","user","onSubmit","isPending","formatMessage","useIntl","initialValues","validationSchema","values","enableReinitialize","component","htmlFor","autoFocus","msg","label","disabled","ChangePasswordForm","userProfileSaga","form","FormData","append","isNull","isObject","call","request","url","method","data","put","enqueueSnackbar","message","status","error","updateUserError","current_password","new_password","new_password_confirmation","takeLatest","UserProfilePage","useInjectReducer","reducer","useInjectSaga","saga","dispatch","useDispatch","useSelector","makeSelectUser","createSelector","substate","submitUpdateUserForm","useCallback","submitChangePasswordForm"],"mappings":"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","file":"static/js/7.60802be7.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport messages from '../messages';\n\nYup.setLocale({\n  mixed: {\n    required: messages.required,\n    oneOf: messages.oneOf\n  },\n  string: {\n    email: messages.email\n  }\n});\n\nexport default Yup;\n","import camelCase from 'lodash/camelCase';\n\nexport default function parseApiErrorsToFormik(errors) {\n  let result = {};\n\n  for (let key in errors) {\n    result[camelCase(key)] = errors[key][0];\n  }\n\n  return result;\n}\n","/**\n * Checks if `value` is `null`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n * @example\n *\n * _.isNull(null);\n * // => true\n *\n * _.isNull(void 0);\n * // => false\n */\nfunction isNull(value) {\n  return value === null;\n}\n\nmodule.exports = isNull;","export const USER_PROFILE = '[User Profile]';\n\nexport const UPDATE_USER_REQUEST = `${USER_PROFILE} UPDATE_USER_REQUEST`;\nexport const UPDATE_USER_SUCCESS = `${USER_PROFILE} UPDATE_USER_SUCCESS`;\nexport const UPDATE_USER_ERROR = `${USER_PROFILE} UPDATE_USER_ERROR`;\nexport const CHANGE_PASSWORD_REQUEST = `${USER_PROFILE} CHANGE_PASSWORD_REQUEST`;\nexport const CHANGE_PASSWORD_SUCCESS = `${USER_PROFILE} CHANGE_PASSWORD_SUCCESS`;\nexport const CHANGE_PASSWORD_ERROR = `${USER_PROFILE} CHANGE_PASSWORD_ERROR`;\n","import produce from 'immer';\nimport {\n  UPDATE_USER_REQUEST,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_ERROR,\n  CHANGE_PASSWORD_REQUEST,\n  CHANGE_PASSWORD_SUCCESS,\n  CHANGE_PASSWORD_ERROR\n} from './constants';\n\nexport const initialState = {\n  isUpdateUserPending: false,\n  isChangePasswordPending: false\n};\n\n/* eslint-disable default-case */\nconst userProfileReducer = (state = initialState, action) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case UPDATE_USER_REQUEST:\n        draft.isUpdateUserPending = true;\n        break;\n      case UPDATE_USER_SUCCESS:\n      case UPDATE_USER_ERROR:\n        draft.isUpdateUserPending = false;\n        break;\n      case CHANGE_PASSWORD_REQUEST:\n        draft.isChangePasswordPending = true;\n        break;\n      case CHANGE_PASSWORD_SUCCESS:\n      case CHANGE_PASSWORD_ERROR:\n        draft.isChangePasswordPending = false;\n        break;\n    }\n  });\n\nexport default userProfileReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst selectUserProfile = state => state.userProfile || initialState;\n\nconst makeSelectIsUpdateUserPending = () =>\n  createSelector(\n    selectUserProfile,\n    substate => substate.isUpdateUserPending\n  );\n\nconst makeSelectIsChangePasswordPending = () =>\n  createSelector(\n    selectUserProfile,\n    substate => substate.isChangePasswordPending\n  );\n\nexport { makeSelectIsUpdateUserPending, makeSelectIsChangePasswordPending };\n","import {\n  UPDATE_USER_REQUEST,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_ERROR,\n  CHANGE_PASSWORD_REQUEST,\n  CHANGE_PASSWORD_SUCCESS,\n  CHANGE_PASSWORD_ERROR\n} from './constants';\n\nexport function updateUser(firstName, lastName, avatar, setErrors) {\n  return {\n    type: UPDATE_USER_REQUEST,\n    firstName,\n    lastName,\n    avatar,\n    meta: {\n      setErrors\n    }\n  };\n}\n\nexport function updateUserSuccess() {\n  return {\n    type: UPDATE_USER_SUCCESS\n  };\n}\n\nexport function updateUserError(error) {\n  return {\n    type: UPDATE_USER_ERROR,\n    error\n  };\n}\n\nexport function changePassword(\n  currentPassword,\n  newPassword,\n  newPasswordConfirmation,\n  setErrors,\n  resetForm\n) {\n  return {\n    type: CHANGE_PASSWORD_REQUEST,\n    currentPassword,\n    newPassword,\n    newPasswordConfirmation,\n    meta: {\n      setErrors,\n      resetForm\n    }\n  };\n}\n\nexport function changePasswordSuccess() {\n  return {\n    type: CHANGE_PASSWORD_SUCCESS\n  };\n}\n\nexport function changePasswordError() {\n  return {\n    type: CHANGE_PASSWORD_ERROR\n  };\n}\n","import Yup from 'utils/validations';\n\nexport const updateUserSchema = Yup.object().shape({\n  firstName: Yup.string().required(),\n  lastName: Yup.string().required()\n});\n\nexport const changePasswordSchema = Yup.object().shape({\n  currentPassword: Yup.string().required(),\n  newPassword: Yup.string().required(),\n  newPasswordConfirmation: Yup.string()\n    .oneOf([Yup.ref('newPassword'), null])\n    .required()\n});\n","import { defineMessages } from 'react-intl';\n\nexport const scope = 'user_profile';\n\nexport default defineMessages({\n  updateUserHeader: {\n    id: `${scope}.text.update_user_header`,\n    defaultMessage: 'Update Profile'\n  },\n  updateButton: {\n    id: `${scope}.button.update`,\n    defaultMessage: 'Update'\n  },\n  changePasswordButton: {\n    id: `${scope}.button.change_password`,\n    defaultMessage: 'Change Password'\n  },\n  firstNameInputLabel: {\n    id: `${scope}.input_label.first_name`,\n    defaultMessage: 'First Name'\n  },\n  lastNameInputLabel: {\n    id: `${scope}.input_label.last_name`,\n    defaultMessage: 'Last Name'\n  },\n  currentPasswordInputLabel: {\n    id: `${scope}.input_label.current_password`,\n    defaultMessage: 'Current Password'\n  },\n  newPasswordInputLabel: {\n    id: `${scope}.input_label.new_password`,\n    defaultMessage: 'New Password'\n  },\n  newPasswordConfirmationInputLabel: {\n    id: `${scope}.input_label.new_password_confirmation`,\n    defaultMessage: 'New Password Confirmation'\n  },\n  profileUpdated: {\n    id: `${scope}.notification.profile_update`,\n    defaultMessage: 'Profile informations succefully updated'\n  },\n  passwordChanged: {\n    id: `${scope}.notifications.password_changed`,\n    defaultMessage: 'Password succefully changed'\n  }\n});\n","import React, { useState } from 'react';\n\nexport default function ImageField({ field, setFieldValue }) {\n  const { value, name } = field;\n  const [key, setKey] = useState(Date.now());\n\n  function handleOnFileUpload(event) {\n    setFieldValue(name, event.currentTarget.files[0]);\n  }\n\n  function handleRemove() {\n    setFieldValue(name, null);\n    setKey(Date.now());\n  }\n\n  return (\n    <>\n      <input\n        key={key}\n        accept=\"image/*\"\n        id=\"image-upload\"\n        type=\"file\"\n        onChange={handleOnFileUpload}\n      />\n      {value && <button onClick={handleRemove}>Remove</button>}\n    </>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { updateUserSchema } from './validations';\nimport messages from './messages';\nimport ImageField from './ImageField';\n\nexport default function UpdateUserForm({ user, onSubmit, isPending }) {\n  const { formatMessage } = useIntl();\n\n  function handleOnSubmit(values, { setErrors }) {\n    const { firstName, lastName, avatar } = values;\n    onSubmit(firstName, lastName, avatar, setErrors);\n  }\n\n  return (\n    <Formik\n      initialValues={{\n        firstName: user.firstName || '',\n        lastName: user.lastName || '',\n        avatar: user.avatar || null\n      }}\n      validationSchema={updateUserSchema}\n      onSubmit={handleOnSubmit}\n      enableReinitialize\n    >\n      {({ setFieldValue }) => (\n        <Form>\n          <Field\n            component={ImageField}\n            name=\"avatar\"\n            setFieldValue={setFieldValue}\n          />\n          <div>\n            <label htmlFor=\"firstName\">\n              {formatMessage(messages.firstNameInputLabel)}\n            </label>\n            <Field type=\"text\" name=\"firstName\" required autoFocus />\n            <ErrorMessage name=\"firstName\">\n              {msg =>\n                formatMessage(msg, {\n                  label: formatMessage(messages.firstNameInputLabel)\n                })\n              }\n            </ErrorMessage>\n          </div>\n          <div>\n            <label htmlFor=\"lastName\">\n              {formatMessage(messages.lastNameInputLabel)}\n            </label>\n            <Field type=\"text\" name=\"lastName\" required />\n            <ErrorMessage name=\"lastName\">\n              {msg =>\n                formatMessage(msg, {\n                  label: formatMessage(messages.lastNameInputLabel)\n                })\n              }\n            </ErrorMessage>\n          </div>\n          <button disabled={isPending} type=\"submit\">\n            {formatMessage(messages.updateButton)}\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nUpdateUserForm.propTypes = {\n  user: PropTypes.object,\n  onSubmit: PropTypes.func,\n  isPending: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { changePasswordSchema } from './validations';\nimport messages from './messages';\n\nexport default function ChangePasswordForm({ onSubmit, isPending }) {\n  const { formatMessage } = useIntl();\n\n  function handleOnSubmit(values, { setErrors, resetForm }) {\n    const { currentPassword, newPassword, newPasswordConfirmation } = values;\n    onSubmit(\n      currentPassword,\n      newPassword,\n      newPasswordConfirmation,\n      setErrors,\n      resetForm\n    );\n  }\n\n  return (\n    <Formik\n      initialValues={{\n        currentPassword: '',\n        newPassword: '',\n        newPasswordConfirmation: ''\n      }}\n      validationSchema={changePasswordSchema}\n      onSubmit={handleOnSubmit}\n    >\n      <Form>\n        <div>\n          <label htmlFor=\"currentPassword\">\n            {formatMessage(messages.currentPasswordInputLabel)}\n          </label>\n          <Field type=\"password\" name=\"currentPassword\" required />\n          <ErrorMessage name=\"currentPassword\">\n            {msg =>\n              formatMessage(msg, {\n                label: formatMessage(messages.currentPasswordInputLabel)\n              })\n            }\n          </ErrorMessage>\n        </div>\n        <div>\n          <label htmlFor=\"newPassword\">\n            {formatMessage(messages.newPasswordInputLabel)}\n          </label>\n          <Field type=\"password\" name=\"newPassword\" required />\n          <ErrorMessage name=\"newPassword\">\n            {msg =>\n              formatMessage(msg, {\n                label: formatMessage(messages.newPasswordInputLabel)\n              })\n            }\n          </ErrorMessage>\n        </div>\n        <div>\n          <label htmlFor=\"newPasswordConfirmation\">\n            {formatMessage(messages.newPasswordConfirmationInputLabel)}\n          </label>\n          <Field type=\"password\" name=\"newPasswordConfirmation\" required />\n          <ErrorMessage name=\"newPasswordConfirmation\">\n            {msg =>\n              formatMessage(msg, {\n                label: formatMessage(messages.newPasswordConfirmation)\n              })\n            }\n          </ErrorMessage>\n        </div>\n        <button disabled={isPending} type=\"submit\">\n          {formatMessage(messages.changePasswordButton)}\n        </button>\n      </Form>\n    </Formik>\n  );\n}\n\nChangePasswordForm.propTypes = {\n  onSubmit: PropTypes.func,\n  isPending: PropTypes.bool\n};\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport isNull from 'lodash/isNull';\nimport isObject from 'lodash/isObject';\nimport request from 'utils/request';\nimport parseApiErrorsToFormik from 'utils/parseApiErrorsToFormik';\nimport { enqueueSnackbar } from 'containers/Notifier/actions';\nimport {\n  updateUserSuccess,\n  updateUserError,\n  changePasswordSuccess,\n  changePasswordError\n} from './actions';\nimport { UPDATE_USER_REQUEST, CHANGE_PASSWORD_REQUEST } from './constants';\nimport messages from './messages';\n\nexport function* updateUser({\n  firstName,\n  lastName,\n  avatar,\n  meta: { setErrors }\n}) {\n  try {\n    const form = new FormData();\n    form.append('first_name', firstName);\n    form.append('last_name', lastName);\n\n    if (!isNull(avatar) && isObject(avatar)) {\n      form.append('avatar', avatar);\n    }\n\n    yield call(request, {\n      url: '/user',\n      method: 'post',\n      data: form\n    });\n    yield put(updateUserSuccess());\n    yield put(\n      enqueueSnackbar({\n        message: messages.profileUpdated\n      })\n    );\n  } catch (error) {\n    if (error.status === 422) {\n      yield call(setErrors, parseApiErrorsToFormik(error.data.errors));\n    }\n    yield put(updateUserError());\n  }\n}\n\nexport function* changePassword({\n  currentPassword: current_password,\n  newPassword: new_password,\n  newPasswordConfirmation: new_password_confirmation,\n  meta: { setErrors, resetForm }\n}) {\n  try {\n    yield call(request, {\n      url: '/user/change-password',\n      method: 'post',\n      data: {\n        current_password,\n        new_password,\n        new_password_confirmation\n      }\n    });\n    yield put(changePasswordSuccess());\n    yield call(resetForm);\n    yield put(\n      enqueueSnackbar({\n        message: messages.passwordChanged\n      })\n    );\n  } catch (error) {\n    if (error.status === 422) {\n      yield call(setErrors, parseApiErrorsToFormik(error.data.errors));\n    }\n    yield put(changePasswordError());\n  }\n}\n\nexport default function* userProfileSaga() {\n  yield takeLatest(UPDATE_USER_REQUEST, updateUser);\n  yield takeLatest(CHANGE_PASSWORD_REQUEST, changePassword);\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { useInjectReducer } from 'utils/injectReducer';\nimport { useInjectSaga } from 'utils/injectSaga';\nimport { makeSelectUser } from 'containers/App/selectors';\nimport {\n  makeSelectIsUpdateUserPending,\n  makeSelectIsChangePasswordPending\n} from './selectors';\nimport { updateUser, changePassword } from './actions';\nimport UpdateUserForm from './UpdateUserForm';\nimport ChangePasswordForm from './ChangePasswordForm';\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst key = 'userProfile';\n\nfunction UserProfilePage() {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  const dispatch = useDispatch();\n  const user = useSelector(makeSelectUser());\n  const isUpdateUserPending = useSelector(makeSelectIsUpdateUserPending());\n  const isChangePasswordPending = useSelector(\n    makeSelectIsChangePasswordPending()\n  );\n  const submitUpdateUserForm = useCallback(\n    (...args) => dispatch(updateUser(...args)),\n    [dispatch]\n  );\n  const submitChangePasswordForm = useCallback(\n    (...args) => dispatch(changePassword(...args)),\n    [dispatch]\n  );\n\n  return (\n    <main>\n      <Helmet>\n        <title>Profile - React Boilerplate</title>\n      </Helmet>\n      <UpdateUserForm\n        user={user}\n        isPending={isUpdateUserPending}\n        onSubmit={submitUpdateUserForm}\n      />\n      <ChangePasswordForm\n        isPending={isChangePasswordPending}\n        onSubmit={submitChangePasswordForm}\n      />\n    </main>\n  );\n}\n\nexport default UserProfilePage;\n"],"sourceRoot":""}